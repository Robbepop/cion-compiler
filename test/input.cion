var my_global_integer   = 50;
var my_global_fun_call  = bar(foo, 'c', 50, .1234, false, "baz");
var my_global_fun_call2 = baz();
var my_global_number    = .1234;
var my_global_boolean   = false;
var my_global_character = 'i';
var my_global_string    = "Hello, World!";

var my_global_custom_01 : uint = 5;
var my_global_custom_02 : bool = 0 + 5 - 10; // error

function min(lhs : int64, rhs : int64) -> int64 {
	// some stuff
	//-- - i ;
}

function main(paramA : int, paramB : bool) {
	// some stuff
	println("yolo");
	var i = 500;
	i++;
	i = foo <= bar ? 1337 : 42;
	--i++++++;
}

function rec(counter : uint64) -> uint64 {
	return (counter <= 100) ? counter : rec(counter - 1);
}

function min(first : int, second : int) -> int {
	return first <= second ? first : second;
}

var my_global_calc_01 = 50 + 15 * 5 - 100 % foo / bar /* lol */ % foo() + baz[i][a, b, c];
var my_condition_01 = (i <= 5) ? bar : baz + 1337;
var paren_func_test = foo(bar(baz(foo(bar()))));

function compound_block_test() {{{ do_nothing(); }}}

var unary_test = -------5;

function if_test() {
	if only_if_branch {
		do_something_funny();
	}
	if no_default_else_branch() {
		lol();
	} else if rofl != mao {
		xD();
	}
	if blablablub() <= loldrafuck {
		return "hello";
	} else if xD || haha {
		return ", ";
	} else if foo && baz {
		return "world!";
	} else {
		return "\n";
	}
}

function closure_test(lol : int, xD : float) {
	function private_func(my_args : int, my_other_args : float) -> int {
		return my_args + my_other_args;
	}
	return private_func(lol, xD);
}

function while_loop_test() {
	while my_condition_func(foo) {
		do_something_within_this_while_loop();
	}
}
