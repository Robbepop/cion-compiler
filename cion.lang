<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Author: Robin Freyler <robinfreyler@web.de>
 Copyright (C) 2014 Robin Freyler <robinfreyler@web.de>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->

<language id="cion" _name="Cion" version="2.0" _section="Source">

	<metadata>
		<property name="mimetypes">text/x-cion</property>
		<property name="globs">*.cion</property>
		<property name="line-comment-start">//</property>
		<property name="block-comment-start">/*</property>
		<property name="block-comment-end">*/</property>
	</metadata>

	<styles>
		<style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
		<style id="string"            _name="String"                map-to="def:string"/>
		<style id="char"              _name="Character"             map-to="def:character"/>
		<style id="boolean"           _name="Boolean"               map-to="def:boolean"/>
		<style id="number"            _name="Number"                map-to="def:decimal"/>
		<style id="null-value"        _name="Null Value"            map-to="def:special-constant"/>
		<style id="type"              _name="Data Type"             map-to="def:type"/>
		<style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
	</styles>

	<definitions>

		<define-regex id="escaped-character" extended="true">
			\\(               # leading backslash
			[\\\"\'nrbtf] |   # escaped character
			[0-9]{1,3}    |   # latin encoded char
			u[0-9]{1,4}       # unicode char
			)
		</define-regex>

		<context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
			<start>"</start>
			<end>"</end>
			<include>
			<context id="escaped-character" style-ref="escaped-character">
			  <match>\%{escaped-character}</match>
			</context>
			</include>
		</context>

		<context id="char" style-ref="char">
			<match>'(\%{escaped-character}|.)'</match>
		</context>

		<context id="boolean" style-ref="boolean">
			<keyword>false</keyword>
			<keyword>true</keyword>
		</context>

		<context id="numeric" style-ref="number">
			<match extended="true">
				(\b([0-9]+|0[xX][0-9a-fA-F]+)[Ll]?\b|
				 \b(([0-9]+[Ee][-]?[0-9]+|
					([0-9]*\.[0-9]+|[0-9]+\.)([Ee][-]?[0-9]+)?)[fFdD]?|
					[0-9]+[FfDd]))
			</match>
		</context>

		<context id="null-value" style-ref="null-value">
			<keyword>null</keyword>
		</context>

		<context id="keywords" style-ref="keyword">
			<keyword>if</keyword>
			<keyword>else</keyword>
			<keyword>try</keyword>
			<keyword>catch</keyword>
			<keyword>finally</keyword>
			<keyword>switch</keyword>
			<keyword>case</keyword>
			<keyword>break</keyword>
			<keyword>return</keyword>
			<keyword>continue</keyword>
			<keyword>for</keyword>
			<keyword>while</keyword>
			<keyword>do</keyword>
			<keyword>module</keyword>
			<keyword>import</keyword>
			<keyword>class</keyword>
			<keyword>struct</keyword>
			<keyword>interface</keyword>
			<keyword>union</keyword>
			<keyword>function</keyword>
			<keyword>method</keyword>
			<keyword>constructor</keyword>
			<keyword>destructor</keyword>
			<keyword>mutable</keyword>
			<keyword>ref</keyword>
			<keyword>ptr</keyword>
			<keyword>private</keyword>
			<keyword>protected</keyword>
			<keyword>public</keyword>
			<keyword>extends</keyword>
			<keyword>implements</keyword>
			<keyword>final</keyword>
			<keyword>virtual</keyword>
			<keyword>override</keyword>
			<keyword>abstract</keyword>
			<keyword>extern</keyword>
			<keyword>var</keyword>
			<keyword>val</keyword>
			<keyword>throw</keyword>
			<keyword>addressof</keyword>
			<keyword>sizeof</keyword>
		</context>

		<context id="types" style-ref="type">
			<keyword>int</keyword>
			<keyword>int8</keyword>
			<keyword>int16</keyword>
			<keyword>int32</keyword>
			<keyword>int64</keyword>
			<keyword>uint</keyword>
			<keyword>uint8</keyword>
			<keyword>uint16</keyword>
			<keyword>uint32</keyword>
			<keyword>uint64</keyword>
			<keyword>float</keyword>
			<keyword>float16</keyword>
			<keyword>float32</keyword>
			<keyword>float64</keyword>
			<keyword>char</keyword>
			<keyword>bool</keyword>
			<keyword>void</keyword>
		</context>

		<context id="cion" class="no-spell-check">
			<include>
				<context ref="def:c-like-comment"/>
				<context ref="def:c-like-comment-multiline"/>
				<context ref="def:c-like-close-comment-outside-comment"/>
				<context ref="keywords"/>
				<context ref="types"/>
				<context ref="null-value"/>
				<context ref="boolean"/>
				<context ref="char"/>
				<context ref="string"/>
				<context ref="numeric"/>
			</include>
		</context>

	</definitions>

</language>
