#include "ast/binary_expr.hpp"

#include "cion_token_types.hpp"

#include <stdexcept>
#include <utility>

namespace cion {
namespace ast {

//////////////////////////////////////////////////////////////////////////////////////////
/// BinaryExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::BinaryExpr(
		std::unique_ptr<Expr> lhs,
		std::unique_ptr<Expr> rhs
	):
		m_lhs{std::move(lhs)},
		m_rhs{std::move(rhs)}
	{}

	Expr & BinaryExpr::lhs() {
		assert(m_lhs != nullptr);
		return *m_lhs.get();
	}

	Expr & BinaryExpr::rhs() {
		assert(m_rhs != nullptr);
		return *m_rhs.get();
	}

	Expr const& BinaryExpr::lhs() const {
		assert(m_lhs != nullptr);
		return *m_lhs;
	}

	Expr const& BinaryExpr::rhs() const {
		assert(m_rhs != nullptr);
		return *m_rhs.get();
	}

	void BinaryExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// LogicalOrExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind LogicalOrExpr::kind() const {
		return BinaryExpr::Kind::logical_or;
	}

	void LogicalOrExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// LogicalAndExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind LogicalAndExpr::kind() const {
		return BinaryExpr::Kind::logical_and;
	}

	void LogicalAndExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// BitOrExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind BitOrExpr::kind() const {
		return BinaryExpr::Kind::bit_or;
	}

	void BitOrExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// BitXorExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind BitXorExpr::kind() const {
		return BinaryExpr::Kind::bit_xor;
	}

	void BitXorExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// BitAndExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind BitAndExpr::kind() const {
		return BinaryExpr::Kind::bit_and;
	}

	void BitAndExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// AddExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind AddExpr::kind() const {
		return BinaryExpr::Kind::add;
	}

	void AddExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// SubtractExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind SubtractExpr::kind() const {
		return BinaryExpr::Kind::subtract;
	}

	void SubtractExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// MultiplyExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind MultiplyExpr::kind() const {
		return BinaryExpr::Kind::multiply;
	}

	void MultiplyExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// DivideExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind DivideExpr::kind() const {
		return BinaryExpr::Kind::divide;
	}

	void DivideExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// ModuloExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind ModuloExpr::kind() const {
		return BinaryExpr::Kind::modulo;
	}

	void ModuloExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// ShiftLeftExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind ShiftLeftExpr::kind() const {
		return BinaryExpr::Kind::shift_left;
	}

	void ShiftLeftExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// ShiftRightExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind ShiftRightExpr::kind() const {
		return BinaryExpr::Kind::shift_right;
	}

	void ShiftRightExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// EqualityExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind EqualityExpr::kind() const {
		return BinaryExpr::Kind::equality;
	}

	void EqualityExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// InequalityExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind InequalityExpr::kind() const {
		return BinaryExpr::Kind::inequality;
	}

	void InequalityExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// LessThanExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind LessThanExpr::kind() const {
		return BinaryExpr::Kind::less_than;
	}

	void LessThanExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// LessEqualsExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind LessEqualsExpr::kind() const {
		return BinaryExpr::Kind::less_equals;
	}

	void LessEqualsExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// GreaterThanExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind GreaterThanExpr::kind() const {
		return BinaryExpr::Kind::greater_than;
	}

	void GreaterThanExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}

//////////////////////////////////////////////////////////////////////////////////////////
/// GreaterEqualsExpr
//////////////////////////////////////////////////////////////////////////////////////////

	BinaryExpr::Kind GreaterEqualsExpr::kind() const {
		return BinaryExpr::Kind::greater_equals;
	}

	void GreaterEqualsExpr::accept(CompilerPass & pass) {
		pass.visit(*this);
	}


} // namespace ast
} // namespace cion
